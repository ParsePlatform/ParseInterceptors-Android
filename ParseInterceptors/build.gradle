apply plugin: 'com.android.library'

group = 'com.parse'
version = '0.0.3-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
}

repositories {
    jcenter()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName project.version
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
}

dependencies {
    compile 'com.parse:parse-android:1.12.0'

    provided 'com.facebook.stetho:stetho:1.1.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.json:json:20140107'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def jar = project.tasks.create(name: "jar${name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir

        manifest {
            attributes(
                    "Bundle-Name": 'parseinterceptors',
                    "Bundle-Version": project.version
            )
        }

        exclude '**/R.class'
        exclude '**/R\$*.class'
        exclude '**/Manifest.class'
        exclude '**/Manifest\$*.class'
        exclude '**/BuildConfig.class'
    }

    def javadoc = task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        options.links("http://boltsframework.github.io/docs/android/")

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/internal/**'
    }

    def javadocJar = task("javadocJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    if (name.equals(com.android.builder.core.BuilderConstants.RELEASE)) {
        artifacts.add('archives', jar);
        artifacts.add('archives', javadocJar);
    }
}

//region Maven

apply plugin: 'maven'
apply plugin: 'signing'

def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'ParseInterceptors-Android'
            artifactId = 'parseinterceptors'
            packaging 'aar'
            description 'A powerful tool that allows you to monitor the http requests and responses between Parse SDK and Parse Server.'
            url 'https://github.com/ParsePlatform/ParseInterceptors-Android'

            scm {
                connection 'scm:git@github.com:ParsePlatform/ParseInterceptors-Android.git'
                developerConnection 'scm:git@github.com:ParsePlatform/ParseInterceptors-Android.git'
                url 'https://github.com/ParsePlatform/ParseInterceptors-Android'
            }

            licenses {
                license {
                    name 'BSD License'
                    url 'https://github.com/ParsePlatform/ParseInterceptors-Android/blob/master/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'parse'
                    name 'Parse'
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//endregion
